version: '3.8'

services:
  # 前端应用服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: zhizhentong-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000/ws
      - VITE_APP_TITLE=智诊通
      - VITE_DEBUG_MODE=true
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./package.json:/app/package.json
      - ./vite.config.ts:/app/vite.config.ts
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.node.json:/app/tsconfig.node.json
      - ./env.example:/app/.env
    networks:
      - zhizhentong-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 后端API服务（示例配置）
  backend:
    image: node:18-alpine
    container_name: zhizhentong-backend
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/zhizhentong
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../backend:/app
    working_dir: /app
    command: npm run dev
    networks:
      - zhizhentong-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: zhizhentong-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=zhizhentong
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - zhizhentong-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: zhizhentong-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - zhizhentong-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 向量数据库（Weaviate）
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: zhizhentong-weaviate
    ports:
      - "8080:8080"
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - zhizhentong-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理（生产环境）
  nginx:
    image: nginx:alpine
    container_name: zhizhentong-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./dist:/usr/share/nginx/html
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - zhizhentong-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

  # 监控服务（Prometheus）
  prometheus:
    image: prom/prometheus:latest
    container_name: zhizhentong-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - zhizhentong-network
    restart: unless-stopped
    profiles:
      - monitoring

  # 监控可视化（Grafana）
  grafana:
    image: grafana/grafana:latest
    container_name: zhizhentong-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - zhizhentong-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # 日志收集（ELK Stack）
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: zhizhentong-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - zhizhentong-network
    restart: unless-stopped
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: zhizhentong-logstash
    volumes:
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - zhizhentong-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: zhizhentong-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - zhizhentong-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    profiles:
      - logging

# 数据卷定义
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# 网络定义
networks:
  zhizhentong-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
